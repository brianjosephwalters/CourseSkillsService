
package com.courseskillsservice.courseservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CourseService", targetNamespace = "http://courseservice.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CourseService {


    /**
     * 
     * @param courseID
     * @return
     *     returns com.courseskillsservice.courseservice.Course
     * @throws NonexistentCourseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCourse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetCourse")
    @ResponseWrapper(localName = "getCourseResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetCourseResponse")
    @Action(input = "http://courseservice.com/CourseService/getCourseRequest", output = "http://courseservice.com/CourseService/getCourseResponse", fault = {
        @FaultAction(className = NonexistentCourseException_Exception.class, value = "http://courseservice.com/CourseService/getCourse/Fault/NonexistentCourseException")
    })
    public Course getCourse(
        @WebParam(name = "courseID", targetNamespace = "")
        String courseID)
        throws NonexistentCourseException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<com.courseskillsservice.courseservice.Course>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActiveCourses", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetActiveCourses")
    @ResponseWrapper(localName = "getActiveCoursesResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetActiveCoursesResponse")
    @Action(input = "http://courseservice.com/CourseService/getActiveCoursesRequest", output = "http://courseservice.com/CourseService/getActiveCoursesResponse")
    public List<Course> getActiveCourses();

    /**
     * 
     * @return
     *     returns java.util.List<com.courseskillsservice.courseservice.Course>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCourses", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetAllCourses")
    @ResponseWrapper(localName = "getAllCoursesResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetAllCoursesResponse")
    @Action(input = "http://courseservice.com/CourseService/getAllCoursesRequest", output = "http://courseservice.com/CourseService/getAllCoursesResponse")
    public List<Course> getAllCourses();

    /**
     * 
     * @param courseCode
     * @return
     *     returns java.util.List<com.courseskillsservice.courseservice.Section>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSectionsOfCourse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetAllSectionsOfCourse")
    @ResponseWrapper(localName = "getAllSectionsOfCourseResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetAllSectionsOfCourseResponse")
    @Action(input = "http://courseservice.com/CourseService/getAllSectionsOfCourseRequest", output = "http://courseservice.com/CourseService/getAllSectionsOfCourseResponse")
    public List<Section> getAllSectionsOfCourse(
        @WebParam(name = "courseCode", targetNamespace = "")
        String courseCode);

    /**
     * 
     * @param year
     * @param courseCode
     * @return
     *     returns java.util.List<com.courseskillsservice.courseservice.Section>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCurrentSectionsOfCourse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetAllCurrentSectionsOfCourse")
    @ResponseWrapper(localName = "getAllCurrentSectionsOfCourseResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetAllCurrentSectionsOfCourseResponse")
    @Action(input = "http://courseservice.com/CourseService/getAllCurrentSectionsOfCourseRequest", output = "http://courseservice.com/CourseService/getAllCurrentSectionsOfCourseResponse")
    public List<Section> getAllCurrentSectionsOfCourse(
        @WebParam(name = "courseCode", targetNamespace = "")
        String courseCode,
        @WebParam(name = "year", targetNamespace = "")
        Integer year);

    /**
     * 
     * @param courseCode
     * @return
     *     returns java.util.List<java.lang.Integer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCourseSkillCodes", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetCourseSkillCodes")
    @ResponseWrapper(localName = "getCourseSkillCodesResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetCourseSkillCodesResponse")
    @Action(input = "http://courseservice.com/CourseService/getCourseSkillCodesRequest", output = "http://courseservice.com/CourseService/getCourseSkillCodesResponse")
    public List<Integer> getCourseSkillCodes(
        @WebParam(name = "courseCode", targetNamespace = "")
        String courseCode);

    /**
     * 
     * @return
     *     returns java.util.List<com.courseskillsservice.courseservice.Course>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getInactiveCourses", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetInactiveCourses")
    @ResponseWrapper(localName = "getInactiveCoursesResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetInactiveCoursesResponse")
    @Action(input = "http://courseservice.com/CourseService/getInactiveCoursesRequest", output = "http://courseservice.com/CourseService/getInactiveCoursesResponse")
    public List<Course> getInactiveCourses();

    /**
     * 
     * @param year
     * @param sectionCode
     * @param courseCode
     * @return
     *     returns com.courseskillsservice.courseservice.Section
     * @throws NonexistentSectionException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSection", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetSection")
    @ResponseWrapper(localName = "getSectionResponse", targetNamespace = "http://courseservice.com/", className = "com.courseskillsservice.courseservice.GetSectionResponse")
    @Action(input = "http://courseservice.com/CourseService/getSectionRequest", output = "http://courseservice.com/CourseService/getSectionResponse", fault = {
        @FaultAction(className = NonexistentSectionException_Exception.class, value = "http://courseservice.com/CourseService/getSection/Fault/NonexistentSectionException")
    })
    public Section getSection(
        @WebParam(name = "courseCode", targetNamespace = "")
        String courseCode,
        @WebParam(name = "sectionCode", targetNamespace = "")
        String sectionCode,
        @WebParam(name = "year", targetNamespace = "")
        Integer year)
        throws NonexistentSectionException_Exception
    ;

}
